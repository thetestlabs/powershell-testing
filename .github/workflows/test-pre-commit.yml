name: Test Pre-commit Hooks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC to catch any upstream issues
    - cron: '0 2 * * 0'

jobs:
  test-pre-commit:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install PowerShell (Linux)
      if: runner.os == 'Linux'
      run: |
        # Install PowerShell on Ubuntu
        wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
        
    - name: Install PowerShell (macOS)
      if: runner.os == 'macOS'
      run: |
        # Install PowerShell via Homebrew
        brew install --cask powershell
        
    - name: Verify PowerShell installation
      run: |
        pwsh -Command '$PSVersionTable'
        
    - name: Install PSScriptAnalyzer
      run: |
        pwsh -Command 'Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser'
        
    - name: Verify PSScriptAnalyzer installation
      run: |
        pwsh -Command 'Get-Module -ListAvailable -Name PSScriptAnalyzer | Select-Object Name, Version, Path'
        
    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        
    - name: Install pre-commit hooks
      run: |
        pre-commit install
        
    - name: Run pre-commit on all files (verbose)
      run: |
        pre-commit run --all-files --verbose
        
    - name: Show pre-commit hook results (if failed)
      if: failure()
      run: |
        echo "Pre-commit failed. Showing PowerShell and .NET diagnostics:"
        pwsh -Command '$PSVersionTable | Format-Table -AutoSize'
        pwsh -Command '[System.Runtime.InteropServices.RuntimeInformation]::FrameworkDescription'
        pwsh -Command 'Get-Module -ListAvailable -Name PSScriptAnalyzer'

  test-hook-isolation:
    name: Test Hook Isolation on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install PowerShell (Linux)
      if: runner.os == 'Linux'
      run: |
        wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
        
    - name: Install PowerShell (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install --cask powershell
        
    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        
    - name: Test individual hooks
      run: |
        # Test PSScriptAnalyzer hook only
        pre-commit run --all-files psscriptanalyzer --verbose
        
        # Test formatter hook only
        pre-commit run --all-files psscriptanalyzer-format --verbose

  test-powershell-variants:
    name: Test PowerShell Variants on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            powershell-variant: "windows-powershell"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install PowerShell Core (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
        elif [ "${{ runner.os }}" = "macOS" ]; then
          brew install --cask powershell
        fi
        
    - name: Test PowerShell executable detection
      run: |
        python -c "
        import subprocess
        import sys
        
        # Test different PowerShell executables
        executables = ['pwsh', 'powershell']
        if sys.platform == 'darwin':
            executables.append('pwsh-lts')
            
        for exe in executables:
            try:
                result = subprocess.run([exe, '-Command', '\$PSVersionTable.PSVersion'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    print(f'✓ {exe}: Available')
                    print(f'  Version: {result.stdout.strip()}')
                else:
                    print(f'✗ {exe}: Exit code {result.returncode}')
            except FileNotFoundError:
                print(f'✗ {exe}: Not found')
            except Exception as e:
                print(f'✗ {exe}: Error - {e}')
        "
        
    - name: Install pre-commit and test
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        pre-commit run --all-files --verbose

  report-compatibility:
    name: Compatibility Report
    runs-on: ubuntu-latest
    needs: [test-pre-commit, test-hook-isolation, test-powershell-variants]
    if: always()
    
    steps:
    - name: Generate compatibility report
      run: |
        echo "## Pre-commit Hook Compatibility Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Main Tests**: ${{ needs.test-pre-commit.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Hook Isolation**: ${{ needs.test-hook-isolation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **PowerShell Variants**: ${{ needs.test-powershell-variants.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test-pre-commit.result }}" != "success" ]; then
          echo "⚠️ **Main tests failed** - Check logs for assembly loading or compatibility issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test-hook-isolation.result }}" != "success" ]; then
          echo "⚠️ **Hook isolation tests failed** - Individual hooks may have issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test-powershell-variants.result }}" != "success" ]; then
          echo "⚠️ **PowerShell variant tests failed** - PowerShell detection may need improvement" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Troubleshooting" >> $GITHUB_STEP_SUMMARY
        echo "If tests fail with assembly loading errors:" >> $GITHUB_STEP_SUMMARY
        echo "1. Check PowerShell and .NET versions" >> $GITHUB_STEP_SUMMARY
        echo "2. Try reinstalling PSScriptAnalyzer" >> $GITHUB_STEP_SUMMARY
        echo "3. Clear PowerShell module cache" >> $GITHUB_STEP_SUMMARY
